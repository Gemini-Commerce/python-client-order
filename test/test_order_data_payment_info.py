# coding: utf-8

"""
    order Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from order.models.order_data_payment_info import OrderDataPaymentInfo

class TestOrderDataPaymentInfo(unittest.TestCase):
    """OrderDataPaymentInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrderDataPaymentInfo:
        """Test OrderDataPaymentInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrderDataPaymentInfo`
        """
        model = OrderDataPaymentInfo()
        if include_optional:
            return OrderDataPaymentInfo(
                code = '',
                additional_info = '',
                amount = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                fee = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                vat_amount = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                vat_percentage = 1.337,
                vat_inaccurate = True,
                vat_calculated = True,
                title = order.models.order_localized_text.orderLocalizedText(
                    value = {
                        'key' : ''
                        }, ),
                label = order.models.order_localized_text.orderLocalizedText(
                    value = {
                        'key' : ''
                        }, )
            )
        else:
            return OrderDataPaymentInfo(
                code = '',
                amount = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
        )
        """

    def testOrderDataPaymentInfo(self):
        """Test OrderDataPaymentInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
