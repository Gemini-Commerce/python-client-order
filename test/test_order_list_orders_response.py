# coding: utf-8

"""
    order Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from order.models.order_list_orders_response import OrderListOrdersResponse

class TestOrderListOrdersResponse(unittest.TestCase):
    """OrderListOrdersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrderListOrdersResponse:
        """Test OrderListOrdersResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrderListOrdersResponse`
        """
        model = OrderListOrdersResponse()
        if include_optional:
            return OrderListOrdersResponse(
                orders = [
                    order.models.order_order_data.orderOrderData(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        grn = '', 
                        number = '', 
                        status = '', 
                        channel = '', 
                        market = '', 
                        locale = '', 
                        additional_info = order.models.additional_info.additionalInfo(), 
                        items = [
                            order.models.order_order_data_item.orderOrderDataItem(
                                id = '', 
                                product_grn = '', 
                                qty_ordered = 56, 
                                qty_committed = 56, 
                                unit_sale_price = order.models.order_money.orderMoney(
                                    units = '', 
                                    micros = 56, ), 
                                unit_list_price = order.models.order_money.orderMoney(
                                    units = '', 
                                    micros = 56, ), 
                                unit_base_price = , 
                                unit_vat_amount = , 
                                row_sale_price = , 
                                row_list_price = , 
                                row_vat_amount = , 
                                discount_amount = , 
                                row_base_price = , 
                                vat_percentage = 1.337, 
                                vat_inaccurate = True, 
                                vat_calculated = True, 
                                product_name = '', 
                                product_code = '', 
                                product_sku = '', 
                                product_options = '', 
                                product_img = '', 
                                product_data = '', 
                                shipment_info_reference = '', 
                                promotion_grn = [
                                    ''
                                    ], 
                                product_is_virtual = True, )
                            ], 
                        payments = [
                            order.models.order_payment.orderPayment(
                                order_id = '', 
                                id = '', 
                                code = '', 
                                additional_info = '', 
                                amounts = [
                                    order.models.order_payment_amount.orderPaymentAmount(
                                        code = 'UNKNOWN', 
                                        value = , )
                                    ], 
                                cc_info = order.models.payment_cc_info.PaymentCcInfo(
                                    approval = '', 
                                    exp_month = 56, 
                                    exp_year = '', 
                                    last4 = '', 
                                    number_enc = '', 
                                    owner = '', 
                                    avs_status = '', 
                                    type = '', ), 
                                transactions = [
                                    order.models.order_transaction.orderTransaction(
                                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        payment_id = '', 
                                        id = '', 
                                        type = 'UNKNOWN', 
                                        additional_info = '', 
                                        child_transactions = [
                                            order.models.order_transaction.orderTransaction(
                                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                payment_id = '', 
                                                id = '', 
                                                additional_info = '', )
                                            ], )
                                    ], )
                            ], 
                        shipments = [
                            order.models.order_shipment.orderShipment(
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                order_id = '', 
                                id = '', 
                                status = '', 
                                address = order.models.order_postal_address.orderPostalAddress(
                                    revision = 56, 
                                    region_code = '', 
                                    language_code = '', 
                                    postal_code = '', 
                                    sorting_code = '', 
                                    administrative_area = '', 
                                    locality = '', 
                                    sublocality = '', 
                                    address_lines = [
                                        ''
                                        ], 
                                    recipients = [
                                        ''
                                        ], 
                                    organization = '', 
                                    phone_number = '', 
                                    additional_info = order.models.additional_info.additionalInfo(), ), 
                                from_address = order.models.order_postal_address.orderPostalAddress(
                                    revision = 56, 
                                    region_code = '', 
                                    language_code = '', 
                                    postal_code = '', 
                                    sorting_code = '', 
                                    administrative_area = '', 
                                    locality = '', 
                                    sublocality = '', 
                                    organization = '', 
                                    phone_number = '', 
                                    additional_info = order.models.additional_info.additionalInfo(), ), 
                                return_address = , 
                                tracking = [
                                    order.models.shipment_tracking.ShipmentTracking(
                                        carrier_code = '', 
                                        carrier_title = '', 
                                        url = '', 
                                        number = '', 
                                        label_url = '', )
                                    ], 
                                return_tracking = [
                                    order.models.shipment_tracking.ShipmentTracking(
                                        carrier_code = '', 
                                        carrier_title = '', 
                                        url = '', 
                                        number = '', 
                                        label_url = '', )
                                    ], )
                            ], 
                        payments_info = [
                            order.models.order_data_payment_info.OrderDataPaymentInfo(
                                additional_info = '', 
                                amount = , 
                                fee = , 
                                vat_amount = , 
                                vat_percentage = 1.337, 
                                vat_inaccurate = True, 
                                vat_calculated = True, 
                                title = order.models.order_localized_text.orderLocalizedText(), 
                                label = order.models.order_localized_text.orderLocalizedText(), )
                            ], 
                        shipments_info = [
                            order.models.order_data_shipment_info.OrderDataShipmentInfo(
                                reference = '', 
                                method = '', 
                                additional_info = '', 
                                vat_percentage = 1.337, 
                                vat_inaccurate = True, 
                                vat_calculated = True, 
                                grn = '', )
                            ], 
                        promotions = [
                            order.models.order_data_promotion_info.OrderDataPromotionInfo(
                                additional_info = '', 
                                name = '', 
                                description = '', 
                                coupon_code = '', 
                                vat_percentage = 1.337, 
                                vat_inaccurate = True, 
                                vat_calculated = True, )
                            ], 
                        currency = 'XXX', 
                        subtotals = {
                            'key' : order.models.order_data_subtotal.OrderDataSubtotal()
                            }, 
                        totals = {
                            'key' : order.models.order_data_total.OrderDataTotal()
                            }, 
                        vat_included = True, 
                        billing_address = , 
                        shipping_address = , 
                        customer_info = order.models.order_data_customer_info.OrderDataCustomerInfo(
                            grn = '', 
                            firstname = '', 
                            lastname = '', 
                            email = '', 
                            phone = '', 
                            segment = '', 
                            data = '', 
                            certified_email = '', 
                            tax_code = '', ), 
                        cart_grn = '', 
                        on_hold = True, 
                        history_events = [
                            order.models.order_data_history.OrderDataHistory(
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                status = '', 
                                comment = '', )
                            ], 
                        fulfillments = [
                            order.models.order_fulfillment.orderFulfillment(
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                order_id = '', 
                                id = '', 
                                status = '', )
                            ], 
                        notes = '', 
                        is_deleted = True, 
                        inserted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                next_page_token = ''
            )
        else:
            return OrderListOrdersResponse(
        )
        """

    def testOrderListOrdersResponse(self):
        """Test OrderListOrdersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
