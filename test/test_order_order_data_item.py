# coding: utf-8

"""
    order Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from order.models.order_order_data_item import OrderOrderDataItem

class TestOrderOrderDataItem(unittest.TestCase):
    """OrderOrderDataItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrderOrderDataItem:
        """Test OrderOrderDataItem
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrderOrderDataItem`
        """
        model = OrderOrderDataItem()
        if include_optional:
            return OrderOrderDataItem(
                id = '',
                product_grn = '',
                qty_ordered = 56,
                qty_committed = 56,
                unit_sale_price = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                unit_list_price = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                unit_base_price = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                unit_vat_amount = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                row_sale_price = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                row_list_price = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                row_vat_amount = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                discount_amount = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                row_base_price = order.models.order_money.orderMoney(
                    units = '', 
                    micros = 56, ),
                vat_percentage = 1.337,
                vat_inaccurate = True,
                vat_calculated = True,
                product_name = '',
                product_code = '',
                product_sku = '',
                product_options = '',
                product_img = '',
                product_data = '',
                shipment_info_reference = '',
                promotion_grn = [
                    ''
                    ],
                product_is_virtual = True
            )
        else:
            return OrderOrderDataItem(
        )
        """

    def testOrderOrderDataItem(self):
        """Test OrderOrderDataItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
