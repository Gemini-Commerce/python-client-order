# coding: utf-8

"""
    order Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from order.models.order_list_shipments_response import OrderListShipmentsResponse

class TestOrderListShipmentsResponse(unittest.TestCase):
    """OrderListShipmentsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrderListShipmentsResponse:
        """Test OrderListShipmentsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrderListShipmentsResponse`
        """
        model = OrderListShipmentsResponse()
        if include_optional:
            return OrderListShipmentsResponse(
                shipments = [
                    order.models.order_shipment.orderShipment(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        order_id = '', 
                        id = '', 
                        status = '', 
                        items = [
                            order.models.order_shipment_item.orderShipmentItem(
                                order_item_id = '', 
                                qty = 56, 
                                row_weight = '', )
                            ], 
                        address = order.models.order_postal_address.orderPostalAddress(
                            revision = 56, 
                            region_code = '', 
                            language_code = '', 
                            postal_code = '', 
                            sorting_code = '', 
                            administrative_area = '', 
                            locality = '', 
                            sublocality = '', 
                            address_lines = [
                                ''
                                ], 
                            recipients = [
                                ''
                                ], 
                            organization = '', 
                            phone_number = '', 
                            additional_info = order.models.additional_info.additionalInfo(), ), 
                        from_address = order.models.order_postal_address.orderPostalAddress(
                            revision = 56, 
                            region_code = '', 
                            language_code = '', 
                            postal_code = '', 
                            sorting_code = '', 
                            administrative_area = '', 
                            locality = '', 
                            sublocality = '', 
                            organization = '', 
                            phone_number = '', 
                            additional_info = order.models.additional_info.additionalInfo(), ), 
                        return_address = , 
                        tracking = [
                            order.models.shipment_tracking.ShipmentTracking(
                                carrier_code = '', 
                                carrier_title = '', 
                                url = '', 
                                number = '', 
                                label_url = '', )
                            ], 
                        return_tracking = [
                            order.models.shipment_tracking.ShipmentTracking(
                                carrier_code = '', 
                                carrier_title = '', 
                                url = '', 
                                number = '', 
                                label_url = '', )
                            ], )
                    ]
            )
        else:
            return OrderListShipmentsResponse(
        )
        """

    def testOrderListShipmentsResponse(self):
        """Test OrderListShipmentsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
