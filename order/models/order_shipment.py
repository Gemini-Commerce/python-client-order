# coding: utf-8

"""
    order Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from order.models.order_postal_address import OrderPostalAddress
from order.models.order_shipment_item import OrderShipmentItem
from order.models.shipment_tracking import ShipmentTracking
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OrderShipment(BaseModel):
    """
    OrderShipment
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    order_id: Optional[StrictStr] = Field(default=None, alias="orderId")
    id: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    items: Optional[List[OrderShipmentItem]] = None
    address: Optional[OrderPostalAddress] = None
    from_address: Optional[OrderPostalAddress] = Field(default=None, alias="fromAddress")
    return_address: Optional[OrderPostalAddress] = Field(default=None, alias="returnAddress")
    tracking: Optional[List[ShipmentTracking]] = None
    return_tracking: Optional[List[ShipmentTracking]] = Field(default=None, alias="returnTracking")
    __properties: ClassVar[List[str]] = ["createdAt", "updatedAt", "orderId", "id", "status", "items", "address", "fromAddress", "returnAddress", "tracking", "returnTracking"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderShipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_address
        if self.from_address:
            _dict['fromAddress'] = self.from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_address
        if self.return_address:
            _dict['returnAddress'] = self.return_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tracking (list)
        _items = []
        if self.tracking:
            for _item in self.tracking:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tracking'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in return_tracking (list)
        _items = []
        if self.return_tracking:
            for _item in self.return_tracking:
                if _item:
                    _items.append(_item.to_dict())
            _dict['returnTracking'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OrderShipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "orderId": obj.get("orderId"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "items": [OrderShipmentItem.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "address": OrderPostalAddress.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "fromAddress": OrderPostalAddress.from_dict(obj.get("fromAddress")) if obj.get("fromAddress") is not None else None,
            "returnAddress": OrderPostalAddress.from_dict(obj.get("returnAddress")) if obj.get("returnAddress") is not None else None,
            "tracking": [ShipmentTracking.from_dict(_item) for _item in obj.get("tracking")] if obj.get("tracking") is not None else None,
            "returnTracking": [ShipmentTracking.from_dict(_item) for _item in obj.get("returnTracking")] if obj.get("returnTracking") is not None else None
        })
        return _obj


